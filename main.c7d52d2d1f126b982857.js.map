{"version":3,"sources":["webpack:///./js/modal.js","webpack:///./js/auth-modal/authApi.js","webpack:///./js/auth-modal/pnotify.js","webpack:///./js/auth-modal/authLogin.js","webpack:///./js/auth-modal/authRegistr.js","webpack:///./js/auth-modal/auth.js"],"names":["refs","openModalBtn","document","querySelector","closeModalBtn","modal","onClickCloseModal","window","removeEventListener","onKeyDown","onOverlayClick","classList","add","event","currentTarget","target","code","addEventListener","remove","pushError","text","type","delay","options","alert","log","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","result","message","parse","email","sessionStorage","setItem","accessToken","sid","refreshToken","user","console","regOptions","title","error","defaults","styling","preventDefault","form","formData","FormData","forEach","value","key","contains","registerSubm","loginSubmit"],"mappings":"yIAEQA,EAAO,CACXC,aAAcC,SAASC,cAAc,qBACrCC,cAAeF,SAASC,cAAc,sBACtCE,MAAOH,SAASC,cAAc,iBAahC,SAASG,IACPC,OAAOC,oBAAoB,UAAWC,GACtCT,EAAKK,MAAMG,oBAAoB,QAASE,GACxCV,EAAKK,MAAMM,UAAUC,IAAI,aAG3B,SAASF,EAAeG,GAClBA,EAAMC,gBAAkBD,EAAME,QAChCT,IAIJ,SAASG,EAAUI,GACE,WAAfA,EAAMG,MACRV,IAxBJN,EAAKC,aAAagB,iBAAiB,SAIpB,WACbV,OAAOU,iBAAiB,UAAWR,GACnCT,EAAKK,MAAMY,iBAAiB,QAASP,GACrCV,EAAKK,MAAMM,UAAUO,OAAO,gBAN9BlB,EAAKI,cAAca,iBAAiB,QAASX,G,8BCLxC,I,gCCEA,SAASa,EACdC,EACAC,EACAC,QACA,IAHAF,MAAO,6BAGP,IAFAC,MAAO,SAEP,IADAC,MAAQ,KAER,IAAMC,EAAU,CACdH,OACAC,OACAC,SAEFE,gBAAMD,G,6WCdO,WAA2BE,GAA3B,6FACPC,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUN,IANV,kBAULO,MACJ,qDACAN,GAECO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,GAAuB,sBAAnBA,EAAOC,QACTlB,EAAUiB,EAAOC,cACZ,GAAKD,EAAOC,UAAP,aAAiCP,KAAKQ,MAAMZ,EAAeG,MAAMU,MAAjE,uBACVpB,EAAUiB,EAAOC,cACZ,GAAuB,uCAAnBD,EAAOC,QAChBlB,EAAUiB,EAAOC,aACZ,IAAuB,0CAAnBD,EAAOC,QAOhB,OAJAG,eAAeC,QAAQ,QAASL,EAAOM,aACvCF,eAAeC,QAAQ,MAAOL,EAAOO,KACrCH,eAAeC,QAAQ,UAAWL,EAAOQ,cAElCR,EAAOS,KANd1B,EAAUiB,EAAOC,aAvBZ,sDAkCXS,QAAQrB,IAAI,QAAZ,MAlCW,yD,mYCAA,WAA4BA,GAA5B,sFACLsB,EAAa,CACjBpB,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUN,IAGxB,IACGO,MAAM,wDAAyDe,GAC5Dd,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACAA,EAAOC,UAAP,aAAgCP,KAAKQ,MAAMS,EAAWlB,MAAMU,MAA5D,yBAGwB,uCAAnBH,EAAOC,SAGY,0CAAnBD,EAAOC,QALdlB,EAAUiB,EAAOC,UASjBS,QAAQrB,IAAIW,GACZZ,MAAM,CACJwB,MAAO,wDACP1B,MAAO,UAKjB,MAAO2B,GAASH,QAAQrB,IAAI,QAASwB,GA/B1B,4C,sBFEfC,WAASC,QAAU,W,oBGDKjD,SAASC,cAAc,cAqB/Bc,iBAAiB,SAnBJ,SAAAJ,GAC3BA,EAAMuC,iBAD8B,IAGbC,EAASxC,EAAxBC,cACFwC,EAAW,IAAIC,SAASF,GACxBxB,EAAO,GAEbyB,EAASE,SAAQ,SAACC,EAAOC,GACvB7B,EAAK6B,GAAOD,KAGV5C,EAAME,OAAOJ,UAAUgD,SAAS,kBDdvB,SAAf,2BCeIC,CAAa/B,GAEJhB,EAAME,OAAOJ,UAAUgD,SAAS,iBFjB9B,SAAf,2BEkBME,CAAYhC,Q","file":"main.c7d52d2d1f126b982857.js","sourcesContent":["//открывает модалку и закрывает\r\n\r\n  const refs = {\r\n    openModalBtn: document.querySelector('[data-modal-open]'),\r\n    closeModalBtn: document.querySelector('[data-modal-close]'),\r\n    modal: document.querySelector('[data-modal]'),\r\n  };\r\n\r\n  refs.openModalBtn.addEventListener('click', onClickOpenModal);\r\n  refs.closeModalBtn.addEventListener('click', onClickCloseModal);\r\n\r\n\r\n  export default function onClickOpenModal() {\r\n    window.addEventListener(\"keydown\", onKeyDown);\r\n    refs.modal.addEventListener(\"click\", onOverlayClick);\r\n    refs.modal.classList.remove(\"is-hidden\");\r\n  }\r\n\r\n  function onClickCloseModal() {\r\n    window.removeEventListener(\"keydown\", onKeyDown);\r\n    refs.modal.removeEventListener(\"click\", onOverlayClick);\r\n    refs.modal.classList.add(\"is-hidden\");\r\n  }\r\n\r\n  function onOverlayClick(event) {\r\n    if (event.currentTarget === event.target) {\r\n      onClickCloseModal()\r\n    }\r\n  }\r\n  \r\n  function onKeyDown(event) {\r\n    if (event.code === \"Escape\") {\r\n      onClickCloseModal()\r\n    }\r\n}","// import axios from 'axios';\r\n\r\n// const BASE_URL = 'https://callboard-backend.herokuapp.com';\r\n\r\nexport const registerUser = userData => {\r\n  const { email, password } = userData;\r\n\r\n  return axios.post(`https://callboard-backend.herokuapp.com/auth/register`, { email, password });\r\n}\r\n\r\nexport const loginUser = userData => {\r\n  const { email, password } = userData;\r\n\r\n  return axios.post(`https://callboard-backend.herokuapp.com/users/login`, {email, password });\r\n}","import { defaults, alert } from '@pnotify/core';\r\nimport '@pnotify/core/dist/Material.css';\r\nimport '@pnotify/core/dist/PNotify.css';\r\n\r\ndefaults.styling = 'material';\r\n\r\nexport function pushError(\r\n  text = 'Something went wrong',\r\n  type = '',\r\n  delay = 3000,\r\n) {\r\n  const options = {\r\n    text,\r\n    type,\r\n    delay,\r\n  };\r\n  alert(options);\r\n}\r\n","import { pushError } from './pnotify';\r\n\r\nexport default async function loginSubmit(log) {\r\n  const requestOptions = {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(log),\r\n  };\r\n\r\n  try {\r\n    await fetch(\r\n      'https://callboard-backend.herokuapp.com/auth/login',\r\n      requestOptions,\r\n    )\r\n      .then(response => response.json())\r\n      .then(result => {\r\n        if (result.message === 'Password is wrong') {\r\n          pushError(result.message);\r\n        } else if ( result.message === `User with ${ JSON.parse(requestOptions.body).email } email doesn't exist` ) {\r\n          pushError(result.message);\r\n        } else if (result.message === '\"email\" is not allowed to be empty') {\r\n          pushError(result.message);\r\n        } else if (result.message === '\"password\" is not allowed to be empty') {\r\n          pushError(result.message);\r\n        } else {\r\n          sessionStorage.setItem('token', result.accessToken);\r\n          sessionStorage.setItem('sid', result.sid);\r\n          sessionStorage.setItem('refresh', result.refreshToken);\r\n          // document.getElementById('auth-form').reset();\r\n          return result.user;\r\n        }\r\n      })\r\n     \r\n  } catch (error) {\r\n    console.log('error', error);\r\n  }\r\n}\r\n\r\n\r\n// // import { loginUser } from './authApi';\r\n//  import { pushError } from './pnotify';\r\n\r\n// export default async function loginSubmit(event) {\r\n//   // event.preventDefault();\r\n\r\n//   // const { currentTarget: form } = event;\r\n//   // const formData = new FormData(form);\r\n//   const body = {};\r\n\r\n//   formData.forEach((value, key) => {\r\n//     body[key] = value;\r\n//   });\r\n\r\n//   // console.log(body);\r\n  \r\n//   try {\r\n//     const { response } = await loginUser(body);\r\n\r\n//     console.log(response, 'response');\r\n//     sessionStorage.setItem('accessToken', response.accessToken);\r\n//     sessionStorage.setItem('refreshToken', response.refreshToken);\r\n//     sessionStorage.setItem('sid', response.sid);\r\n//   }\r\n//   catch (error) {\r\n//     pushError(\r\n//       'Помилка!',\r\n//     );\r\n//   }\r\n//   }\r\n\r\n","import { pushError } from './pnotify';\r\n\r\nexport default async function registerSubm(log) {\r\n    const regOptions = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(log)\r\n    };\r\n  \r\n   try {\r\n      fetch(\"https://callboard-backend.herokuapp.com/auth/register\", regOptions)\r\n        .then(response => response.json())\r\n        .then(result => {\r\n          if (result.message === `User with ${JSON.parse(regOptions.body).email} email already exists`) {\r\n            pushError(result.message)\r\n          }\r\n          else if (result.message === '\"email\" is not allowed to be empty') {\r\n            pushError(result.message)\r\n          }\r\n          else if (result.message === '\"password\" is not allowed to be empty'){\r\n            pushError(result.message)\r\n          }\r\n          else {\r\n            console.log(result)\r\n            alert({\r\n              title: \"Pеєстрація пройшла успішно, натисніть кнопку 'Увійти'\",\r\n              delay: 200\r\n            })\r\n          }\r\n        })\r\n    }\r\n    catch (error) { console.log('error', error) };\r\n  }\r\n\r\n// // const registerFormRef = document.querySelector('.auth-form');\r\n// export default function registerSubmit(event) {\r\n//     // event.preventDefault();\r\n    \r\n//     // const { currentTarget: form } = event;\r\n//     // const formData = new FormData(form);\r\n//     const body = {}\r\n\r\n//     formData.forEach((value, key) => {\r\n//         body[key] = value;\r\n//     })\r\n//     registerUser(body)\r\n//         .then(({ data }) => {\r\n//             console.log(data);\r\n            \r\n//       sessionStorage.setItem('token', data.token)\r\n//     })\r\n//         .catch(error => {\r\n//             console.dir(error)\r\n//             pushError(\r\n//       'Цей email вже використовується!',\r\n//     );\r\n//     });\r\n// };\r\n\r\n\r\n// registerFormRef.addEventListener('submit', registerSubmit);\r\n\r\n// import { registerUser, loginUser } from './authApi';\r\n// import { pushError } from './pnotify';\r\n\r\n// const registerFormRef = document.querySelector('.auth-form');\r\n// registerFormRef.addEventListener('click', async event => {\r\n//         event.preventDefault();\r\n    \r\n//         const { currentTarget: form } = event;\r\n//         const formData = new FormData(form);\r\n//         const body = {}\r\n\r\n//         formData.forEach((value, key) => {\r\n//             body[key] = value;\r\n//         })\r\n//     if (e.target.classList.contains('js-btn-registr')) {\r\n//         registerUser(body)\r\n//             .then(({ data }) => {\r\n//                console.log(data);\r\n//                localStorage.setItem('token', data.token)\r\n//             })\r\n//             .catch(error => {\r\n//                 console.dir(error)\r\n//                 pushError( 'Цей email вже використовується!');\r\n//             });\r\n//         } else if (e.target.classList.contains('js-btn-login')) { \r\n//     try {\r\n//       const { response } = await loginUser(body);\r\n//       sessionStorage.setItem('accessToken', response.accessToken);\r\n//       sessionStorage.setItem('refreshToken', response.refreshToken);\r\n//       sessionStorage.setItem('sid', response.sid);\r\n//     }\r\n//     catch (error) {\r\n//       pushError(\r\n//         'Помилка!',\r\n//       );\r\n//     };\r\n//     }\r\n// }\r\n// )","import registerSubm from './authRegistr';\r\nimport loginSubmit from './authLogin';\r\n\r\nconst registerFormRef = document.querySelector('.auth-form');\r\n\r\nconst handleRegisterSubmit = event => {\r\n  event.preventDefault();\r\n\r\n  const { currentTarget: form } = event;\r\n  const formData = new FormData(form);\r\n  const body = {};\r\n\r\n  formData.forEach((value, key) => {\r\n    body[key] = value;\r\n  })\r\n  \r\n  if (event.target.classList.contains('js-btn-registr')) {\r\n    registerSubm(body);\r\n\r\n  } else if (event.target.classList.contains('js-btn-login')) {\r\n      loginSubmit(body);  \r\n    }  \r\n}\r\n\r\nregisterFormRef.addEventListener('click', handleRegisterSubmit)"],"sourceRoot":""}